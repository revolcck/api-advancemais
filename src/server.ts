/**
 * Ponto de entrada da aplica√ß√£o
 * Inicializa o servidor e gerencia o ciclo de vida da aplica√ß√£o
 */

import { createApp } from "@/config/app";
import { env } from "@/config/environment";
import { db, prisma } from "@/config/database";
import { redisService } from "@/config/redis";
import { logger } from "@/shared/utils/logger.utils";
import * as chalk from "chalk";
import path from "path";
import { format as formatDate } from "date-fns";

// Inst√¢ncia do aplicativo Express
const app = createApp();

/**
 * Fun√ß√£o para inicializar as conex√µes com servi√ßos externos
 */
async function initializeConnections(): Promise<void> {
  try {
    // Conecta ao banco de dados
    await db.connect();

    // Vari√°veis para status das conex√µes
    let databaseConnected = false;
    let redisConnected = false;
    let databaseConnections = 0;

    try {
      // Verifica se a conex√£o com o banco foi bem sucedida
      // e obt√©m o n√∫mero de conex√µes (pool)
      const result = await prisma.$queryRaw`SELECT 1`;
      databaseConnected = true;

      // Obt√©m o n√∫mero de conex√µes do pool MySQL
      try {
        // Isso √© espec√≠fico para MySQL/MariaDB
        const poolStats =
          await prisma.$queryRaw`SHOW STATUS LIKE 'Threads_connected'`;
        if (Array.isArray(poolStats) && poolStats.length > 0) {
          databaseConnections = Number(poolStats[0].Value) || 0;
        }
      } catch (poolError) {
        // Se n√£o conseguir obter o n√∫mero de conex√µes, apenas ignora
        databaseConnections = 1; // Assume pelo menos 1 conex√£o
      }
    } catch (error) {
      databaseConnected = false;
      logger.error("Erro ao verificar conex√£o com banco de dados", error);
    }

    // Conecta ao Redis se estiver configurado
    if (env.redis.host) {
      try {
        await redisService.connect();
        redisConnected = redisService.isConnected();
      } catch (error) {
        redisConnected = false;
        // Erro j√° foi registrado no servi√ßo Redis
        // Em desenvolvimento, continuamos mesmo sem Redis
        if (!env.isDevelopment) {
          throw error;
        }
      }
    }

    // Exibe banner com informa√ß√µes do sistema e status das conex√µes
    showBanner({
      database: databaseConnected,
      redis: redisConnected,
      databaseConnections,
    });

    // Logs adicionais sobre conex√µes para o arquivo de log
    if (databaseConnected) {
      logger.info("‚úÖ Conex√£o com banco de dados estabelecida com sucesso", {
        type: "mysql",
        connections: databaseConnections,
        url: env.databaseUrl.replace(/\/\/([^:]+):([^@]+)@/, "//***:***@"), // Oculta credenciais
      });
    }

    if (redisConnected) {
      logger.info("‚úÖ Conex√£o com Redis estabelecida com sucesso", {
        host: env.redis.host,
        port: env.redis.port,
      });
    } else if (env.redis.host) {
      logger.warn("‚ö†Ô∏è Conex√£o com Redis n√£o estabelecida", {
        host: env.redis.host,
        port: env.redis.port,
      });
    }
  } catch (error) {
    logger.error("Falha ao inicializar conex√µes", error);
    process.exit(1);
  }
}

/**
 * Exibe um banner aprimorado com informa√ß√µes do projeto
 */
function showBanner(
  connections: {
    database?: boolean;
    redis?: boolean;
    databaseConnections?: number;
  } = {}
): void {
  const packageJson = require(path.join(process.cwd(), "package.json"));
  const projectName = packageJson.name;
  const projectVersion = packageJson.version;

  const envColor = env.isDevelopment
    ? chalk.yellow
    : env.isProduction
      ? chalk.green
      : chalk.blue;

  const dbStatus = connections.database
    ? chalk.green("‚úì Conectado")
    : chalk.red("‚úó Desconectado");

  const redisStatus = connections.redis
    ? chalk.green("‚úì Conectado")
    : chalk.red("‚úó Desconectado");

  const connectionInfo =
    connections.database && connections.databaseConnections
      ? `(${connections.databaseConnections} conex√µes)`
      : "";

  const memoryUsage = process.memoryUsage();
  const memoryUsedMB = Math.round(memoryUsage.heapUsed / 1024 / 1024);
  const memoryTotalMB = Math.round(memoryUsage.heapTotal / 1024 / 1024);

  // Estilo e cores consistentes
  const titleStyle = chalk.cyan.bold;
  const sectionStyle = chalk.cyan;
  const labelStyle = chalk.dim;
  const valueStyle = chalk.white;
  const highlightStyle = chalk.cyan;
  const separatorLine = "  " + chalk.dim("‚îÄ".repeat(50));

  console.log("\n");
  console.log(titleStyle(`  üöÄ ${projectName.toUpperCase()} `));
  console.log(valueStyle(`  ${projectVersion}`));
  console.log(separatorLine);

  // Se√ß√£o do Sistema
  console.log(sectionStyle("\n  üìä Sistema"));
  console.log(`  ${labelStyle("Node.js:")}     ${valueStyle(process.version)}`);
  console.log(`  ${labelStyle("Ambiente:")}    ${envColor(env.nodeEnv)}`);
  console.log(
    `  ${labelStyle("Porta:")}       ${valueStyle(env.port.toString())}`
  );
  console.log(
    `  ${labelStyle("Mem√≥ria:")}     ${valueStyle(
      `${memoryUsedMB}MB / ${memoryTotalMB}MB`
    )} ${labelStyle("(utilizada/alocada)")}`
  );

  // Se√ß√£o de Conex√µes
  console.log(sectionStyle("\n  üîå Conex√µes"));
  console.log(
    `  ${labelStyle("Banco de Dados:")} ${dbStatus} ${
      connectionInfo ? highlightStyle(connectionInfo) : ""
    }`
  );
  console.log(`  ${labelStyle("Redis:")}         ${redisStatus}`);

  // Data de In√≠cio
  console.log(separatorLine);
  console.log(
    `  ${labelStyle("Iniciado em:")}  ${valueStyle(
      formatDate(new Date(), "dd/MM/yyyy HH:mm:ss")
    )}`
  );

  // Informa√ß√µes T√©cnicas
  if (env.isDevelopment) {
    console.log(sectionStyle("\n  üîß Informa√ß√µes T√©cnicas"));
    console.log(
      `  ${labelStyle("PID:")}          ${valueStyle(process.pid.toString())}`
    );
    console.log(
      `  ${labelStyle("Plataforma:")}   ${valueStyle(process.platform)}`
    );
    console.log(`  ${labelStyle("Arquitetura:")}  ${valueStyle(process.arch)}`);

    console.log(sectionStyle("\n  üì¶ Depend√™ncias"));
    const dependencies = packageJson.dependencies;
    const keyDeps = [
      "express",
      "@prisma/client",
      "jose",
      "joi",
      "bcryptjs",
      "redis",
    ];

    keyDeps.forEach((dep) => {
      if (dependencies[dep]) {
        console.log(
          `  ${labelStyle("‚Ä¢")} ${labelStyle(dep + ":")} ${valueStyle(
            dependencies[dep]
          )}`
        );
      }
    });
  }

  console.log("\n");
}

/**
 * Fun√ß√£o para encerrar conex√µes graciosamente antes de encerrar o aplicativo
 */
async function shutdown(): Promise<void> {
  logger.info("üõë Recebido sinal para encerrar o aplicativo");

  try {
    // Desconecta do banco de dados
    await db.disconnect();
    logger.info("üîå Conex√£o com banco de dados fechada");

    // Desconecta do Redis se estiver conectado
    if (redisService.isConnected()) {
      await redisService.disconnect();
      logger.info("üîå Conex√£o com Redis fechada");
    }

    // Fecha streams de log (se estiver usando a classe Logger)
    if (logger.closeStreams) {
      logger.closeStreams();
    }

    logger.info("‚úÖ Conex√µes encerradas com sucesso");

    // D√° tempo para os logs serem gravados antes de encerrar
    setTimeout(() => {
      process.exit(0);
    }, 500);
  } catch (error) {
    logger.error("‚ùå Erro ao encerrar conex√µes", error);
    process.exit(1);
  }
}

/**
 * Configura o tratamento de sinais do sistema operacional
 * para encerrar a aplica√ß√£o graciosamente
 */
process.on("SIGTERM", shutdown);
process.on("SIGINT", shutdown);

/**
 * Tratamento global de exce√ß√µes n√£o capturadas
 */
process.on("uncaughtException", (error) => {
  logger.error("üî• Exce√ß√£o n√£o capturada", error);

  // Em produ√ß√£o, √© melhor encerrar o processo e deixar o gerenciador de processos reiniciar
  if (env.isProduction) {
    process.exit(1);
  }
});

/**
 * Tratamento global de rejei√ß√µes de promessas n√£o capturadas
 */
process.on("unhandledRejection", (reason) => {
  logger.error("üî• Rejei√ß√£o de promessa n√£o tratada", reason);

  // Em produ√ß√£o, √© melhor encerrar o processo e deixar o gerenciador de processos reiniciar
  if (env.isProduction) {
    process.exit(1);
  }
});

/**
 * Inicializa as conex√µes e inicia o servidor HTTP
 */
(async () => {
  try {
    // Inicializa conex√µes com servi√ßos externos
    await initializeConnections();

    // Inicia o servidor HTTP
    const server = app.listen(env.port, () => {
      logger.info(`üöÄ Servidor rodando em http://localhost:${env.port}`);
      logger.info(`üåé Ambiente: ${env.nodeEnv}`);

      // Registra m√©tricas iniciais
      const memUsage = process.memoryUsage();
      logger.debug("M√©tricas iniciais", {
        memory: {
          rss: `${(memUsage.rss / 1024 / 1024).toFixed(2)} MB`,
          heapTotal: `${(memUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`,
          heapUsed: `${(memUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`,
        },
        cpu: process.cpuUsage(),
      });
    });

    // Configura timeout do servidor
    server.timeout = 30000; // 30 segundos

    // Configura relat√≥rio peri√≥dico de status em desenvolvimento
    if (env.isDevelopment) {
      // A cada 15 minutos, exibe um relat√≥rio de status
      setInterval(
        () => {
          const memUsage = process.memoryUsage();
          const uptime = process.uptime();

          const days = Math.floor(uptime / 86400);
          const hours = Math.floor((uptime % 86400) / 3600);
          const minutes = Math.floor((uptime % 3600) / 60);

          const uptimeStr =
            days > 0
              ? `${days}d ${hours}h ${minutes}m`
              : hours > 0
                ? `${hours}h ${minutes}m`
                : `${minutes}m`;

          console.log(chalk.cyan("\nüìä Relat√≥rio de Status do Servidor"));
          console.log(chalk.white(`  ‚Üí Uptime: ${uptimeStr}`));
          console.log(
            chalk.white(
              `  ‚Üí Mem√≥ria: ${(memUsage.heapUsed / 1024 / 1024).toFixed(
                2
              )}MB / ${(memUsage.heapTotal / 1024 / 1024).toFixed(2)}MB`
            )
          );

          // Verifica e relata conex√µes
          console.log(
            chalk.white(
              `  ‚Üí Banco de Dados: ${
                db.prisma ? "‚úì Conectado" : "‚úó Desconectado"
              }`
            )
          );
          console.log(
            chalk.white(
              `  ‚Üí Redis: ${
                redisService.isConnected() ? "‚úì Conectado" : "‚úó Desconectado"
              }`
            )
          );
          console.log("");
        },
        15 * 60 * 1000
      ); // 15 minutos
    }
  } catch (error) {
    logger.error("‚ùå Falha ao iniciar o servidor", error);
    process.exit(1);
  }
})();
