/**
 * Configura√ß√£o do cliente Redis para cache e tarefas que exigem armazenamento em mem√≥ria
 * Implementa o padr√£o Singleton para garantir uma √∫nica inst√¢ncia do cliente Redis
 */

import { createClient, RedisClientType } from "redis";
import { env } from "./environment";
import { logger } from "@/shared/utils/logger.utils";

/**
 * Classe Singleton para gerenciar a conex√£o com o Redis
 */
class RedisService {
  private static instance: RedisService;
  private _client: RedisClientType | null = null;
  private _isConnected: boolean = false;
  private _isConnecting: boolean = false;
  private _hasLoggedSuccess: boolean = false;

  /**
   * Construtor privado que inicializa a configura√ß√£o do Redis
   */
  private constructor() {
    const url = this.getRedisUrl();

    // Se n√£o tem URL configurada, n√£o inicializa o cliente
    if (!url) {
      logger.debug(`Redis n√£o configurado. Operando sem Redis.`);
      return;
    }

    logger.debug(
      `Inicializando cliente Redis com URL: ${this.getSafeUrl(url)}`
    );

    // Cria o cliente Redis com configura√ß√µes adequadas para cada ambiente
    this._client = createClient({
      url,
      socket: {
        // Em desenvolvimento, sem reconex√£o autom√°tica
        // Em produ√ß√£o, reconex√£o limitada para evitar ciclos infinitos
        reconnectStrategy: env.isDevelopment
          ? false
          : (retries) => (retries > 5 ? 5000 : Math.min(retries * 500, 3000)),
        connectTimeout: 10000, // 10 segundos de timeout na conex√£o
      },
    });

    // Configura√ß√£o de listeners para eventos do Redis
    this.setupEventListeners();
  }

  /**
   * Configura os listeners de eventos para o cliente Redis
   */
  private setupEventListeners(): void {
    if (!this._client) return;

    this._client.on("connect", () => {
      if (!this._hasLoggedSuccess) {
        logger.info("üîÑ Redis: Iniciando conex√£o...");
      }
    });

    this._client.on("ready", () => {
      this._isConnected = true;
      if (!this._hasLoggedSuccess) {
        logger.info("‚úÖ Redis: Conex√£o estabelecida com sucesso");
        this._hasLoggedSuccess = true;
      }
    });

    this._client.on("error", (err) => {
      // Log mais detalhado do erro
      if (!(env.isDevelopment && err.code === "ECONNREFUSED")) {
        logger.error("‚ùå Redis: Erro na conex√£o", {
          message: err.message,
          code: err.code,
          stack: err.stack,
        });
      } else {
        logger.warn(
          "‚ö†Ô∏è Redis: N√£o foi poss√≠vel conectar em ambiente de desenvolvimento",
          {
            code: err.code,
          }
        );
      }
      this._isConnected = false;
    });

    this._client.on("end", () => {
      this._isConnected = false;
      this._hasLoggedSuccess = false;
      logger.info("üîå Redis: Conex√£o encerrada");
    });

    // Adiciona listener para reconex√µes
    this._client.on("reconnecting", () => {
      logger.info("üîÑ Redis: Tentando reconectar...");
    });
  }

  /**
   * Constr√≥i a URL de conex√£o com o Redis baseada nas vari√°veis de ambiente
   * @returns URL formatada para conex√£o com o Redis ou null se n√£o configurado
   */
  private getRedisUrl(): string | null {
    const { host, port, password } = env.redis;

    // Se n√£o houver host configurado, retorna nulo
    if (!host) {
      return null;
    }

    const authPart = password ? `:${password}@` : "";
    return `redis://${authPart}${host}:${port}`;
  }

  /**
   * Retorna uma vers√£o segura da URL (sem senha) para logs
   */
  private getSafeUrl(url: string | null): string {
    if (!url) return "none";
    return url.replace(/(:.*@)/, ":***@");
  }

  /**
   * M√©todo est√°tico para obter a inst√¢ncia √∫nica do RedisService
   * @returns Inst√¢ncia do RedisService
   */
  public static getInstance(): RedisService {
    if (!RedisService.instance) {
      RedisService.instance = new RedisService();
    }
    return RedisService.instance;
  }

  /**
   * Getter para acessar o cliente Redis
   * @returns Inst√¢ncia do cliente Redis
   */
  public get client(): RedisClientType | null {
    return this._client;
  }

  /**
   * Verifica se a conex√£o com o Redis est√° ativa
   * @returns Verdadeiro se conectado, falso caso contr√°rio
   */
  public isConnected(): boolean {
    return this._isConnected;
  }

  /**
   * M√©todo para conectar ao Redis
   * Deve ser chamado explicitamente durante a inicializa√ß√£o da aplica√ß√£o
   */
  public async connect(): Promise<void> {
    // Evita m√∫ltiplas tentativas de conex√£o simult√¢neas
    if (this._isConnected || this._isConnecting || !this._client) {
      return;
    }

    // Se n√£o tiver cliente criado, n√£o tenta conectar
    if (!this._client) {
      logger.warn("‚ö†Ô∏è Redis: Cliente n√£o inicializado. Operando sem Redis.");
      return;
    }

    this._isConnecting = true;

    try {
      logger.info("üîÑ Redis: Tentando conectar...", {
        host: env.redis.host,
        port: env.redis.port,
      });

      // Tenta estabelecer a conex√£o
      await this._client.connect();

      // Se n√£o lan√ßou exce√ß√£o, a conex√£o foi bem sucedida
      this._isConnected = true;
      logger.info("‚úÖ Redis: Conex√£o estabelecida com sucesso");
    } catch (error) {
      this._isConnected = false;

      if (env.isDevelopment) {
        logger.warn(
          "‚ö†Ô∏è Redis: Continuando sem Redis em ambiente de desenvolvimento",
          { error: error instanceof Error ? error.message : String(error) }
        );
        logger.warn(
          "   Para habilitar o Redis, verifique se o servi√ßo est√° rodando na porta 6379"
        );
      } else {
        logger.error("‚ùå Redis: Erro fatal ao conectar", error);
        throw error;
      }
    } finally {
      this._isConnecting = false;
    }
  }

  /**
   * M√©todo para desconectar do Redis
   * Deve ser chamado quando a aplica√ß√£o for encerrada
   */
  public async disconnect(): Promise<void> {
    if (this._isConnected && this._client) {
      try {
        await this._client.disconnect();
        this._isConnected = false;
        this._hasLoggedSuccess = false;
        logger.info("üîå Redis: Conex√£o encerrada com sucesso");
      } catch (error) {
        logger.error("‚ùå Redis: Erro ao desconectar", error);
        throw error;
      }
    }
  }

  /**
   * Armazena um valor no Redis com uma chave especificada
   * @param key Chave para identificar o valor
   * @param value Valor a ser armazenado
   * @param expireInSeconds Tempo de expira√ß√£o em segundos (opcional)
   */
  public async set(
    key: string,
    value: string,
    expireInSeconds?: number
  ): Promise<void> {
    if (!this._isConnected || !this._client) {
      if (env.isDevelopment) {
        logger.debug(
          `Redis n√£o conectado: SET ${key} (ignorado em desenvolvimento)`
        );
        return; // Silenciosamente n√£o faz nada em desenvolvimento
      }
      throw new Error("Redis n√£o est√° conectado");
    }

    try {
      if (expireInSeconds) {
        await this._client.set(key, value, { EX: expireInSeconds });
        logger.debug(`Redis: SET ${key} (expira em ${expireInSeconds}s)`);
      } else {
        await this._client.set(key, value);
        logger.debug(`Redis: SET ${key}`);
      }
    } catch (error) {
      this.handleOperationError("set", error);
    }
  }

  /**
   * Recupera um valor do Redis pela chave
   * @param key Chave do valor a ser recuperado
   * @returns Valor armazenado ou null se n√£o existir
   */
  public async get(key: string): Promise<string | null> {
    if (!this._isConnected || !this._client) {
      if (env.isDevelopment) {
        logger.debug(
          `Redis n√£o conectado: GET ${key} (ignorado em desenvolvimento)`
        );
        return null; // Silenciosamente retorna null em desenvolvimento
      }
      throw new Error("Redis n√£o est√° conectado");
    }

    try {
      const value = await this._client.get(key);
      logger.debug(
        `Redis: GET ${key} ${value ? "(encontrado)" : "(n√£o encontrado)"}`
      );
      return value;
    } catch (error) {
      return this.handleOperationError("get", error);
    }
  }

  /**
   * Remove um valor do Redis pela chave
   * @param key Chave do valor a ser removido
   */
  public async delete(key: string): Promise<void> {
    if (!this._isConnected || !this._client) {
      if (env.isDevelopment) {
        logger.debug(
          `Redis n√£o conectado: DEL ${key} (ignorado em desenvolvimento)`
        );
        return; // Silenciosamente n√£o faz nada em desenvolvimento
      }
      throw new Error("Redis n√£o est√° conectado");
    }

    try {
      await this._client.del(key);
      logger.debug(`Redis: DEL ${key}`);
    } catch (error) {
      this.handleOperationError("delete", error);
    }
  }

  /**
   * Verifica se uma chave existe no Redis
   * @param key Chave a ser verificada
   * @returns Verdadeiro se existir, falso caso contr√°rio
   */
  public async exists(key: string): Promise<boolean> {
    if (!this._isConnected || !this._client) {
      if (env.isDevelopment) {
        logger.debug(
          `Redis n√£o conectado: EXISTS ${key} (ignorado em desenvolvimento)`
        );
        return false; // Silenciosamente retorna false em desenvolvimento
      }
      throw new Error("Redis n√£o est√° conectado");
    }

    try {
      const result = await this._client.exists(key);
      logger.debug(`Redis: EXISTS ${key} (${result === 1 ? "sim" : "n√£o"})`);
      return result === 1;
    } catch (error) {
      return this.handleOperationError("exists", error);
    }
  }

  /**
   * Manipula erros de opera√ß√µes do Redis de forma consistente
   * @param operation Nome da opera√ß√£o que falhou
   * @param error Erro que ocorreu
   * @returns Valor padr√£o para o tipo de opera√ß√£o em ambiente de desenvolvimento
   * @throws Erro em ambiente de produ√ß√£o
   */
  private handleOperationError<T>(operation: string, error: unknown): T {
    const errorMessage = error instanceof Error ? error.message : String(error);
    logger.error(`Erro na opera√ß√£o ${operation} do Redis:`, {
      error: errorMessage,
    });

    if (env.isDevelopment) {
      // Em desenvolvimento, retornamos valores padr√£o seguros
      switch (operation) {
        case "get":
          return null as T;
        case "exists":
          return false as T;
        default:
          return undefined as T;
      }
    }

    // Em produ√ß√£o, propagamos o erro
    throw error;
  }
}

// Exporta uma inst√¢ncia √∫nica do servi√ßo Redis
export const redisService = RedisService.getInstance();
