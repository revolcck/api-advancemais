
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de papel/função do usuário
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  level       Int
  status      Int      @default(1)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  users       User[]

  @@map("roles")
}

// Modelo de usuário (comum para ambos os tipos)
model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  userType      UserType
  matricula     String       @unique // Formato: AD158KJ
  refreshToken  String?      @db.Text
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastLogin     DateTime?
  
  // Relacionamento com Role
  roleId        String
  role          Role         @relation(fields: [roleId], references: [id])
  
  // Relacionamentos com informações específicas
  personalInfo  PersonalInfo?
  companyInfo   CompanyInfo?

  // Relacionamento com endereço
  address       Address?

  @@map("users")
}

// Enum para definir o tipo de usuário
enum UserType {
  PESSOA_FISICA
  PESSOA_JURIDICA
}

// Modelo para informações de pessoa física
model PersonalInfo {
  id              String    @id @default(uuid())
  name            String
  cpf             String    @unique
  rg              String?
  birthDate       DateTime
  gender          Gender
  phone           String
  companyName     String?   // Empresa onde trabalha (opcional)
  maritalStatus   MaritalStatus?
  
  // Relacionamento com usuário (1:1)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

// Enum para gênero
enum Gender {
  MASCULINO
  FEMININO
  OUTRO
  NAO_INFORMADO
}

// Enum para estado civil
enum MaritalStatus {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
  OUTRO
}

// Modelo para informações de pessoa jurídica
model CompanyInfo {
  id              String    @id @default(uuid())
  companyName     String    // Nome da empresa
  tradeName       String    // Nome fantasia
  legalName       String    // Razão social
  cnpj            String    @unique
  phone           String
  website         String?
  
  // Relacionamento com usuário (1:1)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_info")
}

// Modelo para endereço (usado tanto por pessoa física quanto jurídica)
model Address {
  id              String    @id @default(uuid())
  zipCode         String    // CEP
  street          String    // Logradouro
  number          String
  neighborhood    String    // Bairro
  complement      String?
  city            String
  state           String
  country         String    @default("Brasil")
  
  // Relacionamento com usuário (1:1)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}